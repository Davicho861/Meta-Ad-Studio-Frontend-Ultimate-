// scripts/campaigns/create-celestia-campaign.cjs

// Importamos las funciones y tipos necesarios desde la l√≥gica de nuestra aplicaci√≥n.
// NOTA: Usamos 'require' porque este es un script .cjs para Node.js.
const { addTemplate, exportTemplates } = require('../../src/lib/mockData/index.cjs');
const fs = require('fs');
const path = require('path');

// --- El Brief Creativo de "Celestia" ---
const CELESTIA_PROMPT = "Fotograf√≠a cinematogr√°fica de una galer√≠a de arte minimalista y oscura en el metaverso. En el centro, un reloj de lujo 'Celestia' flota suspendido en el aire, desconstruy√©ndose lentamente en un remolino de engranajes y part√≠culas de luz hologr√°fica. Avatares elegantes observan la obra de arte, sus rostros iluminados por el brillo del reloj. El eslogan 'El Tiempo es un Lienzo' est√° proyectado sutilmente en el suelo. Atm√≥sfera de exclusividad y asombro, estilo fotogr√°fico de un museo de arte moderno, 8K, hiperrealista. --ar 16:9";

// --- El Activo Visual Simulado que "generar√≠a" la IA ---
// En una implementaci√≥n real, aqu√≠ llamar√≠amos a una API de IA.
// Aqu√≠, simulamos el resultado usando una de nuestras im√°genes de alta calidad existentes.
const SIMULATED_GENERATED_IMAGE = {
  id: `campaign_${Date.now()}`,
  prompt: CELESTIA_PROMPT,
  url: '/images/campaign-examples/aura_times_square.webp', // Usamos una imagen espectacular como resultado
  alt: "Una campa√±a de lujo para Celestia en una galer√≠a de arte del metaverso.",
  credit: "Generado por Meta Ad Studio",
  srcJpg: '/images/campaign-examples/aura_times_square.jpg',
  srcWebp: '/images/campaign-examples/aura_times_square.webp',
  srcSet: {
    webp: '/images/campaign-examples/aura_times_square.webp',
    webp2x: '/images/campaign-examples/aura_times_square-2x.webp',
    jpg: '/images/campaign-examples/aura_times_square.jpg',
    jpg2x: '/images/campaign-examples/aura_times_square-2x.jpg',
  },
};

// --- El Plan de Campa√±a Estrat√©gico para el "Campaign Canvas" ---
const CAMPAIGN_PLAN = {
  campaignName: "Celestia: El Tiempo es un Lienzo",
  targetAudience: "Consumidores de lujo, entusiastas de la tecnolog√≠a y coleccionistas de arte digital.",
  phases: [
    {
      name: "Fase 1: Teaser y Expectaci√≥n",
      description: "Lanzamiento de im√°genes en redes sociales mostrando part√≠culas de reloj y fragmentos del eslogan.",
      assets: [SIMULATED_GENERATED_IMAGE.id],
      notes: "Copy: 'El Tiempo no se mide. Se experimenta.'",
    },
    {
      name: "Fase 2: Evento Exclusivo",
      description: "Inauguraci√≥n de la 'Galer√≠a Ef√≠mera Celestia' en Decentraland Art Week. Abierta solo por 24 horas.",
      assets: [],
      notes: "Coordinar con influencers de arte digital para la premiere.",
    },
    {
      name: "Fase 3: Recompensa y Conversi√≥n",
      description: "Los asistentes al evento reciben un NFT 'Fragmento de Tiempo' que otorga acceso prioritario a la lista de compra del reloj.",
      assets: [],
      notes: "El NFT debe tener un dise√±o basado en los engranajes del reloj.",
    },
  ],
};

// --- La Funci√≥n Principal de Orquestaci√≥n ---
async function orchestrateCampaign() {
  console.log("üöÄ Iniciando la orquestaci√≥n de la campa√±a 'Celestia'...");

  // Paso 1: "Generar" el activo visual principal y guardarlo como plantilla.
  console.log("   -> Generando y guardando el activo visual principal como plantilla...");
  addTemplate(SIMULATED_GENERATED_IMAGE);
  console.log(`   ‚úÖ Plantilla "${SIMULATED_GENERATED_IMAGE.id}" guardada con √©xito.`);

  // Paso 2: Exportar todas las plantillas a un archivo para el equipo.
  // Esto simula compartir los activos con otros miembros del equipo.
  const allTemplatesJSON = exportTemplates();
  const templatesFilePath = path.join(__dirname, '../../output/all_templates.json');
  fs.mkdirSync(path.dirname(templatesFilePath), { recursive: true });
  fs.writeFileSync(templatesFilePath, allTemplatesJSON);
  console.log(`   ‚úÖ Todas las plantillas exportadas a ${templatesFilePath}`);

  // Paso 3: Guardar el plan de campa√±a estrat√©gico.
  // Esto simula el trabajo realizado en el "Campaign Canvas".
  const planFilePath = path.join(__dirname, '../../output/celestia_campaign_plan.json');
  fs.mkdirSync(path.dirname(planFilePath), { recursive: true });
  fs.writeFileSync(planFilePath, JSON.stringify(CAMPAIGN_PLAN, null, 2));
  console.log(`   ‚úÖ Plan de campa√±a guardado en ${planFilePath}`);

  console.log("\n‚ú® Orquestaci√≥n de la campa√±a 'Celestia' completada con √©xito. ‚ú®");
  console.log("Revisa la carpeta 'output' para ver los resultados.");
}

// Ejecutar la funci√≥n.
orchestrateCampaign();
